#!/usr/bin/env python

from xml.etree import ElementTree
from requests import get


class NetworkBenchError(Exception):
    pass


class NBChart(object):

    def __init__(self, title, subtitle, timestamp, header, data, summary):
        self.title = title
        self.subtitle = subtitle
        self.timestamp = timestamp
        self.header = header
        self.data = data
        self.summary = summary

    @classmethod
    def parse_xml(cls, xml):
        root = ElementTree.fromstring(xml.encode('utf-8'))
        nbchart = root.find('NBChart')

        try:
            # [sic]
            title = nbchart.find('hearder-def').find('series-def').find('series').get('name')
        except AttributeError:
            raise NetworkBenchError('NetworkBench returns empty results set')

        subtitle = nbchart.findtext('subtitle')
        timestamp = [
            str(r.get('name'))
            for r in nbchart.find('hearder-def').find('rows-def').findall('row')
        ]
        header = [
            v.get('name')
            for v in nbchart.find('hearder-def').find('cols-def').findall('col')
        ]

        rows = nbchart.find('chart-data').find('serieses').find('series').find('rows')
        data = []
        for row in rows.findall('row'):
            data_row = [
                float(c.findtext('value')) if c.findtext('value') != '-' else '-'
                for c in row.find('cols').findall('col')
            ]
            data.append(data_row)

        try:
            sum_average_values = nbchart.find('chart-data').find('serieses').find('series').find('sum-average-values')
            summary = [
                float(c.findtext('value')) if c.findtext('value') != '-' else '-'
                for c in sum_average_values.findall('col')
            ]
        except AttributeError:
            summary = None

        chart = cls(title, subtitle, timestamp, header, data, summary)
        return chart

    def dump_col_by_header(self, header):
        try:
            index = self.header.index(header)
        except ValueError:
            raise NetworkBenchError('Invalid header')
        payload = [row[index] for row in self.data]
        return payload


class NetworkBench(object):

    auth_key = 's2hJYJ2uU7'

    def get_chart(self, chart_id, task_id, fd=None, td=None):

        api = 'http://api.networkbench.com/chartapi/getChartData.do'
        params = {
            'type': 'xml',
            'authkey': self.auth_key,
            'chartId': chart_id,
            'taskId': task_id,
        }
        if fd and td:
            params.update({
                'timeRangeMode': 'Absolute',
                'absoluteTimeFrom': fd,
                'absoluteTimeTo': td
            })

        resp = get(api, params=params)
        xml_data = resp.text
        chart = NBChart.parse_xml(xml_data)
        return chart
