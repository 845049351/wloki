'''Module for ChinaNetCenter API'''

from __future__ import print_function
import os
import json
from hashlib import md5
from datetime import datetime, timedelta
from collections import defaultdict
from tornado.httpclient import HTTPClient
from tornado.httpclient import HTTPRequest
from .common import read_json
from .common import ProviderError

try:
    from urllib.parse import urlencode
except ImportError:
    from urllib import urlencode

CONFIG_FILE = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'credentials.json')


class ChinaNetCenterError(ProviderError):
    '''Error contacting ChinaNetCenter API'''


class ChinaNetCenter(object):

    _config = read_json(CONFIG_FILE)['chinanetcenter']
    _user = _config['user']
    _pass = _config['pass']
    _pass_pub = _config['pass_pub']

    def _req_get(self, api, params):
        req = HTTPRequest(
            url='{}?{}'.format(api, urlencode(params)),
            request_timeout=10,
            validate_cert=False
        )
        http = HTTPClient()
        resp = http.fetch(req)
        return resp

    def _req_post(self, api, params):
        req = HTTPRequest(
            url=api,
            method='POST',
            body=urlencode(params),
            request_timeout=10,
            validate_cert=False
        )
        http = HTTPClient()
        resp = http.fetch(req)
        return resp

    def get_channel_bandwidth(self, start_date, end_date):

        params = {
            'u': self._user,
            'p': self._pass,
            'resultType': 2,
            'format': 'json',
            'startdate': start_date,
            'enddate': end_date
        }
        api = 'https://myview.chinanetcenter.com/api/bandwidth-channel.action'
        resp = self._req_get(api, params)
        if resp.error:
            raise ChinaNetCenterError(resp.error.args)
        channels = json.loads(resp.body.decode('utf-8'))['data']['channel']
        sum_bandwidth = defaultdict(float)
        for channel_data in channels.values():
            for t, b in channel_data.items():
                sum_bandwidth[t] += b

        # Preprocess data for OpenTSDB
        payload = []
        for k, v in sum_bandwidth.items():
            try:
                time = datetime.strptime(k, '%Y-%m-%d %H:%M:%S')
            except ValueError:  # Deals with '24:00:00'
                time = k.replace(' 24', ' 23')
                time = datetime.strptime(time, '%Y-%m-%d %H:%M:%S')
                time += timedelta(hours=1)
            timestamp = int(time.strftime('%s'))
            bandwidth = float('{0:.2f}'.format(v))
            payload.append((timestamp, bandwidth))
        payload.sort()
        return payload

    def cm_publish(self, url_list):
        raise NotImplementedError

        # Validate URL list
        if len(url_list) > 400:
            raise ChinaNetCenterError('URL list too long. Required: <= 400')
        for url in url_list:
            if not (url.startswith('http://') or url.startswith('https://')):
                raise ChinaNetCenterError('URLs must start with "http://" or "https://"')

        today = datetime.today().strftime('%Y%m%d')
        _check_node = '{}{}{}{}'.format(
            today, self._user, 'chinanetcenter', self._pass_pub
        )
        check_node = md5(_check_node.encode('utf-8')).hexdigest()
        params = json.dumps({
            'user_name': self._user,
            'check_node': check_node,
            'need_feedback': '0',
            'url_list': url_list
        })
        print(params)
        api = 'http://cm.chinanetcenter.com/CM/cm-publish!json.do'
        resp = self._req_post(api, params)
        return resp.body.decode('utf-8')

    def content_purge(self, url_list):

        url_list_dirs = [u for u in url_list if u.endswith('/')]
        url_list_files = [u for u in url_list if u not in url_list_dirs]

        # Validate URL lists
        if len(url_list_files) > 500:
            raise ChinaNetCenterError('Too many files. Required: < 500')
        if len(url_list_dirs) > 50:
            raise ChinaNetCenterError('Too many dirs. Required: < 50')

        _passwd = '{}{}{}'.format(
            self._user,
            self._pass_pub,
            ';'.join(url_list_files + url_list_dirs)
        )
        passwd = md5(_passwd.encode('utf-8')).hexdigest()
        params = {
            'username': self._user,
            'passwd': passwd,
            'url': ';'.join(url_list_files),
            'dir': ';'.join(url_list_dirs)
        }
        api = 'http://wscp.lxdns.com:8080/wsCP/servlet/contReceiver'
        resp = self._req_post(api, params)
        resp_str = resp.body.decode('utf-8')
        result_tpl = '''Purge tasks submitted. ChinaNetCenter returns:
        {}'''
        result_msg = result_tpl.format(resp_str)
        return result_msg
