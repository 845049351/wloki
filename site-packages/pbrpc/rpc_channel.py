import google.protobuf.service as service
import os
from log import logger as log
from gevent import socket
import utils
from rpc_pb2 import WirePayload, SIMPLE
from gevent.lock import Semaphore
from utils import RpcException

class Callback(object):
    def __init__(self, ctx = None):
        self.ctx = ctx
        self.response = None
        self.error_message = None

    def done(self, response):
        self.response = response

    def error(self, err):
        self.error_message = err

class RpcChannel(service.RpcChannel):
    def __init__(self, addr, port):
        self._seq_id = 0
        self._addr = addr
        self._port = port
        self._conn = None
        self.reconnect()

        self._rlock = Semaphore()
        self._wlock = Semaphore()

    def reconnect(self):
        if self._conn != None:
            self._conn.close()
        try:
            sck = socket.create_connection((self._addr, self._port))
        except socket.error, e:
            raise RpcException(e)

        self._seq_id += 1

        # send connect request
        req = WirePayload()
        req.connect_request.version = 1<<16
        utils.send_payload(sck, req)
        payload = utils.read_payload_response(sck)
        if not payload.connect_response.IsInitialized():
            raise

        # send initauth request
        req = WirePayload()
        req.initial_auth_request.auth_method = SIMPLE
        req.initial_auth_request.initial_response = "wdj-rpc"
        utils.send_payload(sck, req)
        payload = utils.read_payload_response(sck)
        if not payload.auth_response.IsInitialized():
            raise

        # send properties request
        req = WirePayload()
        req.properties_request.client_host_name = socket.gethostname()
        req.properties_request.client_port = 1234
        req.properties_request.client_pid = str(os.getpid())
        utils.send_payload(sck, req)
        payload = utils.read_payload_response(sck)
        if not payload.properties_response.IsInitialized():
            raise

        self._conn = sck

    def CallMethod(self, method_descriptor, rpc_controller, request, response_class, callback):
        if self._conn.closed:
            retry = 0
            while retry <= 3 and self._conn.closed:
                self.reconnect()
            if self._conn.closed:
                raise RpcException("connecting rpc server fail")

        self._seq_id += 1
        payload = WirePayload()
        payload.rpc_request.call_id = self._seq_id
        payload.rpc_request.service_identifier = method_descriptor.containing_service.full_name
        payload.rpc_request.method_identifier = method_descriptor.name

        buf = request.SerializeToString()
        payload.rpc_request.request_bytes = buf
        buf = payload.SerializeToString()

        self._wlock.acquire()
        try:
            self._conn.sendall(utils.int32_to_bytes(len(buf)) + buf)
        except socket.error, e:
            self._conn.close()
            raise RpcException(e)
        finally:
            self._wlock.release()

        self._rlock.acquire()
        sz = utils.read_int32(self._conn)
        if sz == None:
            self._rlock.release()
            return

        try:
            buf = utils.readall(self._conn, sz)
        except socket.error, e:
            self._conn.close()
            raise RpcException(e)
        finally:
            self._rlock.release()

        payload = WirePayload()
        payload.ParseFromString(buf)

        if payload.rpc_response.IsInitialized():
            response = response_class()
            response.ParseFromString(payload.rpc_response.response_bytes)
            callback.done(response)
        elif payload.rpc_error.IsInitialized():
            callback.error(payload.rpc_error.error)

