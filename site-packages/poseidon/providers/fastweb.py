'''Module for Fastweb API'''

from __future__ import print_function
import os
import json
from datetime import datetime, timedelta
from tornado.httpclient import HTTPClient
from tornado.httpclient import HTTPRequest
from .common import read_json
from .common import ProviderError

CONFIG_FILE = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'credentials.json')


class FastwebError(ProviderError):
    '''Error contacting Fastweb API'''


class Fastweb(object):

    _config = read_json(CONFIG_FILE)['fastweb']
    _api = 'https://cdncs-api.fastweb.com.cn/{}'
    _appid = _config['appid']
    _appsecret = _config['appsecret']
    _access_token = None
    _access_token_expiration = datetime(1970, 1, 1)

    def _req(self, action, params):
        req = HTTPRequest(
            url=self._api.format(action),
            method='POST',
            body=params,
            request_timeout=10,
            validate_cert=False
        )
        http = HTTPClient()
        resp = http.fetch(req)
        return resp

    def get_access_token(self):

        # If access_token is valid, return it straightforward
        if self._access_token_expiration > datetime.now():
            return self._access_token

        # ... otherwise request it from Fastweb
        params = json.dumps({
            'grant_type': 'client_credentials',
            'appid': self._appid,
            'appsecret': self._appsecret
        })
        resp = self._req('oauth/access_token.json', params)
        result = json.loads(resp.body.decode('utf-8'))['result']

        # Cache token and expiration date for future use
        lifespan = timedelta(seconds=result['expires_in'])  # 86400
        self._access_token = result['access_token']
        self._access_token_expiration = datetime.now() + lifespan
        return self._access_token

    def _get_day_traffic(self, date):

        token = self.get_access_token()
        params = json.dumps({
            'date': date,
            'access_token': token
        })
        resp = self._req('report/get_day_traffic.json', params)
        data_list = json.loads(resp.body.decode('utf-8'))['result']['data_list']
        return data_list

    def get_days_traffic(self, start_date, end_date):

        d1 = datetime.strptime(start_date, '%Y-%m-%d')
        d2 = datetime.strptime(end_date, '%Y-%m-%d')
        dates = ((d2 - timedelta(i)).strftime('%Y-%m-%d') for i in range((d2 - d1).days, -1, -1))
        data_list = []
        for date in dates:
            print('Getting metrics for {}'.format(date))
            data_list += self._get_day_traffic(date)

        # Preprocess data for OpenTSDB
        payload = []
        for d in data_list:
            time = datetime.strptime(d['time'], '%Y-%m-%d %H:%M')
            timestamp = int(time.strftime('%s'))
            bandwidth = d['bandwidth']
            payload.append((timestamp, bandwidth))
        payload.sort()
        return payload

    def add_purge(self, url_list):

        token = self.get_access_token()
        url_list_dirs = [u for u in url_list if u.endswith('/')]
        url_list_files = [u for u in url_list if u not in url_list_dirs]
        dir_list = []
        for url in url_list_dirs:
            dir_list.append({'url_name': url})
        file_list = []
        for url in url_list_files:
            file_list.append({'url_name': url})

        params = json.dumps({
            'files': file_list,
            'dirs': dir_list,
            'access_token': token
        })
        resp = self._req('cont/add_purge.json', params)
        resp_dict = json.loads(resp.body.decode('utf-8'))
        result_tpl = '''Purge tasks submitted. Fastweb returns:
        {f_succ_cnt} files successfully purged;
        {f_fail_cnt} failed. They are: {f_fail_lst}
        {d_succ_cnt} directories successfully purged;
        {d_fail_cnt} failed. They are: {d_fail_lst}'''
        result_msg = result_tpl.format(
            f_succ_cnt=resp_dict['file_result']['sucess_count'],  # sic
            f_fail_cnt=resp_dict['file_result']['error_count'],
            f_fail_lst=resp_dict['file_result'].get('error_list', []),
            d_succ_cnt=resp_dict['dir_result']['sucess_count'],  # sic
            d_fail_cnt=resp_dict['dir_result']['error_count'],
            d_fail_lst=resp_dict['dir_result'].get('error_list', [])
        )
        return result_msg
